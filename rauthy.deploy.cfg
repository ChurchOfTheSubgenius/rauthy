#####################################
############## ACCESS ###############
#####################################

# If the User Registration endpoint should be accessible by anyone. If not, an admin must create each new user.
# (default: false)
OPEN_USER_REG=true

#####################################
############ DATABASE ###############
#####################################

# The database driver will be chosen at runtime depending on the given DATABASE_URL format. Examples:
# Sqlite: 'sqlite:data/rauthy.db' or 'sqlite::memory:'
# Postgres: 'postgresql://User:PasswordWithoutSpecialCharacters@localhost:5432/DatabaseName'
#
# NOTE: The password in this case should be alphanumeric. Special characters could cause problems in the connection
# string.
#
# CAUTION: To make the automatic migrations work with Postgres15, when you do not want to just use the `postgres` user,
# You need to have a user with the same name as the DB / schema. For instance, the following would work without
# granting extra access to the `public` schema which is disabled by default since PG15:
# database: rauthy
# user: rauthy
# schema: rauthy with owner rauthy
#
#DATABASE_URL=sqlite:data/rauthy.db
DATABASE_URL=sqlite::memory:

#####################################
############# E-MAIL ################
#####################################

SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_URL=smtp.gmail.com
# Format: "Rauthy <rauthy@localhost.de>"
SMTP_FROM="Rauthy <rauthy@localhost.de>"

#####################################
###### ENCRYPTION / HASHING #########
#####################################

# Format: "key_id/enc_key another_key_id/another_enc_key" - the enc_key itself must be exactly 32 characters long and
# and should not contain special characters.
# The ID must match '[a-zA-Z0-9]{2,20}'
# On Linux, you could use the following to generate a key with ID
# echo "\"$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c8)/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c32)\""
ENC_KEYS="bVCyTsGaggVy5yqQ/S9n7oCen53xSJLzcsmfdnBDvNrqQ63r4 q6u26onRvXVG4427/3CEC8RJWBcMkrBMkRXgx65AmJsNTghSA"
ENC_KEY_ACTIVE=bVCyTsGaggVy5yqQ

# M_COST should never be below 32768 in production
#ARGON2_M_COST=32768
# T_COST should never be below 1 in production
#ARGON2_T_COST=3
# P_COST should never be below 2 in production
#ARGON2_P_COST=2

# Limits the maximum amount of parallel password hashes at the exact same time to never exceed system memory while
# still allowing a good amount of memory for the argon2id algorithm (default: 2)
# CAUTION: You must make sure, that you have at least (MAX_HASH_THREADS * ARGON2_M_COST / 1024) + 30 MB of memory
# available.
MAX_HASH_THREADS=1

#####################################
################ MFA ################
#####################################

# If 'true', MFA for an account must be enabled to access the rauthy admin UI (default: true)
ADMIN_FORCE_MFA=false

# If set to true, you can access rauthy's admin API only with a valid session + CSRF token.
# If you need some external access via JWT tokens, since sessions are managed with cookies, set this to false.
# default: true
ADMIN_ACCESS_SESSION_ONLY=false

#####################################
############# SERVER ################
#####################################

# The server address to listen on. Can bind to a specific IP. (default: 0.0.0.0)
#LISTEN_ADDRESS=0.0.0.0

# The listen ports for HTTP / HTTPS, depending on the activated 'LISTEN_SCHEME'
# default: 8080
#LISTEN_PORT_HTTP=8080
# default: 8443
#LISTEN_PORT_HTTPS=8443

# The scheme to use locally, valid values: http | https | http_https (default: http_https)
LISTEN_SCHEME=http

# The Public URL of the whole deployment
# The LISTEN_SCHEME + PUB_URL must match the HTTP ORIGIN HEADER later on, which is especially important when running
# rauthy behind a reverse proxy. In case of a non-standard port (80/443), you need to add the port to the PUB_URL
PUB_URL=localhost:8080

# default value: number of available physical cores
HTTP_WORKERS=1

# When rauthy is running behind a reverse proxy, set to true (default: false)
#PROXY_MODE=false

#####################################
############# WEBAUTHN ##############
#####################################

# The 'Relaying Party (RP) ID' - effective domain name (default: localhost)
# CAUTION: When this is changed, no already registered device will work!
#RP_ID=localhost

# Url containing the effective domain name (default: http://localhost:8080)
# CAUTION: Must include the port number!
#RP_ORIGIN=http://localhost:8080

# Non critical RP Name
# Has no security properties and may be changed without issues (default: Rauthy Webauthn)
#RP_NAME='Rauthy Webauthn'

# The Cache lifetime in seconds for Webauthn requests. Within this time, a webauthn request must have been validated.
# (default: 60)
WEBAUTHN_REQ_EXP=60

# The Cache lifetime for additional Webauthn Data like auth codes and so on. Should not be lower than WEBAUTHN_REQ_EXP.
# The value is in seconds (default: 90)
WEBAUTHN_DATA_EXP=90

# With webauthn enabled for a user, he needs to enter username / password on a new system. If these credentials are
# verified, rauthy will set an additional cookie, which will determine how long the user can then use only (safe)
# MFA passwordless webauthn login with yubikeys, apple touch id, windows hello, ... until he needs to verify his
# credentials again.
# Passwordless login is generally much safer than logging in with a password. But sometimes it is possible, that the
# Webauthn devices do not force the user to include a second factor, which in that case would be a single factor login
# again. That is why we should ask for the original password in addition once in a while to set the cookie.
# The value is in hours (default: 2160)
WEBAUTHN_RENEW_EXP=2160
